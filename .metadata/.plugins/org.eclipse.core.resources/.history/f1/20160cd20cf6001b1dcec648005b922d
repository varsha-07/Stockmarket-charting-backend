package com.varsha.zuulgateway.appuser;

import java.util.Collection;
import java.util.Collections;
import java.util.UUID;

import org.springframework.data.annotation.Id;
import org.springframework.data.mongodb.core.mapping.Document;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;

import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@Document(value="app_user")
public class AppUser implements UserDetails{
	@Id
	private String id= UUID.randomUUID().toString();
	private String username;
	private String email;
	private String password;
	private String mobileNumber;
	private String appUserRole = "GUEST";
	private boolean locked = false;
	private boolean enabled;
	
	
	public AppUser(String username,String email,String password,String mobileNumber,String appUserRole) {
		 this.username = username;
		 this.email = email;
		 this.password = password;
		 this.mobileNumber=mobileNumber;
		 this.appUserRole = appUserRole;
		 }
	
	public String getappUserRole() {
        return appUserRole;
    }

	
	
	@Override
	public Collection<? extends GrantedAuthority> getAuthorities() {
		SimpleGrantedAuthority authority = new SimpleGrantedAuthority(appUserRole);
        return Collections.singletonList(authority);
	}

	@Override
	public String getPassword() {
		return password;
	}

	@Override
	public String getUsername() {
		return email;
	}

	@Override
	public boolean isAccountNonExpired() {
		return true;
	}

	@Override
	public boolean isAccountNonLocked() {
		return !locked;
	}

	@Override
	public boolean isCredentialsNonExpired() {
		return true;
	}

	@Override
	public boolean isEnabled() {
		return enabled;
	}

}
